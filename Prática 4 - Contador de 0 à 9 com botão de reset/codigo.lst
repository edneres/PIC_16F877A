CCS PCM C Compiler, Version 5.007, 61971               11-jun-23 18:39

               Filename:   C:\Users\edyne\OneDrive\Área de Trabalho\UFPI\Programação\2 - UFPI\6 - Lab de Micro\Prática 5\codigo.lst

               ROM used:   207 words (3%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           19 (5%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   091
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   032
001D:  BTFSS  0B.5
001E:  GOTO   021
001F:  BTFSC  0B.2
0020:  GOTO   035
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   05B
0035:  BCF    0A.3
0036:  BCF    0A.4
0037:  GOTO   046
.................... /* 
.................... 	Contador de 0 à 9 com entrada de reset 
.................... 	 
.................... 	>> Lógica	 
.................... 	   > Ao pressionar o botão P, a contagem será incrementada; 
.................... 	   > Se passar de 9, volta para 0; 
.................... 	   > Em qualquer momento, se pressionar o botão R, a contagem 
.................... 	   será zerada. 
.................... 	    
.................... 			 BOTÃO P -> RB7 (resistor de pull-up) 
.................... 			 BOTÃO R -> RC0 
.................... 	PINOS DO DISPLAY -> RB0 à RB6 
.................... 	    PINO BOLINHA -> RESISTOR DE 470 
.................... */ 
....................  
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0038:  BCF    0A.0
0039:  BCF    0A.1
003A:  BCF    0A.2
003B:  ADDWF  02,F
003C:  RETLW  3F
003D:  RETLW  06
003E:  RETLW  5B
003F:  RETLW  4F
0040:  RETLW  66
0041:  RETLW  6D
0042:  RETLW  7D
0043:  RETLW  07
0044:  RETLW  7F
0045:  RETLW  6F
....................  
.................... #list 
....................  
.................... #include "registradores16F.h" 
.................... // DEFS_877  
.................... //  
.................... // Standard definitions for PIC16F877  
.................... //  
.................... // Copyright, Peter H. Anderson, Baltimore, MD, June, '99  
....................   
.................... //#define byte int  
....................  
.................... //#byte PORTD = 0x08 
.................... //#bit INTF = 0xb.1 
....................  
.................... /* 
.................... 	Alterado por Maria Edivânia Neres de Sousa, acadêmica de Engenharia Elétrica na UFPI. 
.................... 	25/05/2022, Teresina - PI. 
.................... */ 
....................  
.................... #list  
....................  
....................  
.................... #include "Pisca_Alerta.h" 
.................... void config_timer0() 
.................... { 
.................... 	setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); 
*
0087:  BSF    03.5
0088:  MOVF   01,W
0089:  ANDLW  C0
008A:  IORLW  07
008B:  MOVWF  01
.................... 	enable_interrupts(INT_TIMER0); 
008C:  BCF    03.5
008D:  BSF    0B.5
.................... } 
....................  
.................... int estouro = 0; 
....................  
.................... #int_timer0 
.................... void Pisca_Alerta() 
.................... {	 
.................... 	estouro++; 
*
0046:  INCF   28,F
.................... 	 
.................... 	if(estouro == 8) 
0047:  MOVF   28,W
0048:  SUBLW  08
0049:  BTFSS  03.2
004A:  GOTO   052
.................... 	{ 
.................... 		output_toggle(PIN_D1); 
004B:  BSF    03.5
004C:  BCF    08.1
004D:  MOVLW  02
004E:  BCF    03.5
004F:  XORWF  08,F
.................... 		set_timer0(0); 
0050:  CLRF   01
.................... 		estouro = 0; 
0051:  CLRF   28
.................... 	} 
.................... } 
....................  
....................  
.................... #define Incremento PIN_B7 
0052:  BCF    0B.2
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   021
.................... #define Reset      PIN_C0 
....................  
.................... unsigned int8 num   = 0; // Contador para a contagem no display de 7 segmentos 
.................... unsigned int8 cont  = 0; 
....................  
.................... void setup() 
.................... { 
.................... 	// Periféricos // 
.................... 	set_tris_b(0b10000000);   // Define os pinos RB0 a RB6 como saída e RB7 como entrada 
*
0075:  MOVLW  80
0076:  BSF    03.5
0077:  MOVWF  06
.................... 	port_b_pullups(TRUE); 	  // Botão ativado em nível lógico 0 
0078:  BCF    01.7
.................... 	set_tris_c(0xFF); 
0079:  MOVLW  FF
007A:  MOVWF  07
007B:  BCF    03.5
007C:  MOVWF  2B
....................     
....................     // Timer 1 no modo contador com prescaler 1:1 e interrupções habilitadas // 
....................     setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); 
007D:  MOVLW  85
007E:  MOVWF  10
....................     enable_interrupts(INT_TIMER1); 
007F:  BSF    03.5
0080:  BSF    0C.0
....................     enable_interrupts(GLOBAL); 
0081:  MOVLW  C0
0082:  BCF    03.5
0083:  IORWF  0B,F
....................     set_timer1(0); 
0084:  CLRF   0E
0085:  CLRF   0F
0086:  CLRF   0E
....................      
....................     config_timer0(); 
*
008E:  BCF    0A.3
008F:  BCF    0A.4
0090:  GOTO   0A2 (RETURN)
.................... } 
....................  
.................... void display1(unsigned int8 num) 
.................... { 
....................    // Tabela de segmentos para exibir os dígitos de 0 à 9 
....................    					                  //  Pgfedcba 
....................    const unsigned int8 segmentos[10] = {0b00111111,  // 0 
....................                                         0b00000110,  // 1 
....................                                         0b01011011,  // 2 
....................                                         0b01001111,  // 3 
....................                                         0b01100110,  // 4 
....................                                         0b01101101,  // 5 
....................                                         0b01111101,  // 6 
....................                                         0b00000111,  // 7 
....................                                         0b01111111,  // 8 
....................                                         0b01101111}; // 9 
.................... 		 
.................... 	PORTB = segmentos[num]; 
*
0056:  MOVF   2D,W
0057:  CALL   038
0058:  MOVWF  78
0059:  MOVWF  06
005A:  RETURN
.................... } 
....................  
.................... #int_timer1 
.................... void interrupcao() 
.................... { 
.................... 	set_timer1(0); 
005B:  CLRF   0E
005C:  CLRF   0F
005D:  CLRF   0E
.................... 	cont++; 
005E:  INCF   2A,F
.................... 	 
.................... 	if(cont > 40 && input(Incremento) == 0) // 0,524s 
005F:  MOVF   2A,W
0060:  SUBLW  28
0061:  BTFSC  03.0
0062:  GOTO   06E
0063:  BSF    03.5
0064:  BSF    06.7
0065:  BCF    03.5
0066:  BTFSC  06.7
0067:  GOTO   06E
.................... 	{ 
.................... 		num++; 
0068:  INCF   29,F
.................... 		cont = 0; 
0069:  CLRF   2A
.................... 		 
.................... 		if(num > 9) 
006A:  MOVF   29,W
006B:  SUBLW  09
006C:  BTFSS  03.0
.................... 		{ 
.................... 			num = 0; 
006D:  CLRF   29
.................... 		} 
.................... 	} 
.................... 		 
.................... 	display1(num); 
006E:  MOVF   29,W
006F:  MOVWF  2D
0070:  CALL   056
0071:  BCF    0C.0
0072:  BCF    0A.3
0073:  BCF    0A.4
0074:  GOTO   021
.................... } 
....................  
.................... void main() 
*
0091:  CLRF   28
0092:  CLRF   29
0093:  CLRF   2A
0094:  MOVLW  FF
0095:  MOVWF  2B
0096:  BSF    03.5
0097:  BSF    1F.0
0098:  BSF    1F.1
0099:  BSF    1F.2
009A:  BCF    1F.3
009B:  MOVLW  07
009C:  MOVWF  1C
009D:  BCF    03.7
009E:  MOVLW  1F
009F:  ANDWF  03,F
.................... {   
.................... 	setup(); 
00A0:  BCF    03.5
00A1:  GOTO   075
.................... 	Pisca_Alerta(); 
00A2:  BSF    0B.2
00A3:  CLRF   27
00A4:  BTFSC  0B.7
00A5:  BSF    27.7
00A6:  BCF    0B.7
.................... 	display1(0); 
00A7:  CLRF   2D
00A8:  CALL   056
00A9:  BTFSC  27.7
00AA:  BSF    0B.7
.................... 		 
....................     while (1) 
....................     {    
.................... 	    if(input(Reset) == 0) 
00AB:  BSF    2B.0
00AC:  MOVF   2B,W
00AD:  BSF    03.5
00AE:  MOVWF  07
00AF:  BCF    03.5
00B0:  BTFSC  07.0
00B1:  GOTO   0BF
.................... 	    { 
.................... 	    	set_timer1(0); 
00B2:  CLRF   0E
00B3:  CLRF   0F
00B4:  CLRF   0E
.................... 	    	cont = 0; 
00B5:  CLRF   2A
.................... 	    	num = 0; 
00B6:  CLRF   29
00B7:  CLRF   27
00B8:  BTFSC  0B.7
00B9:  BSF    27.7
00BA:  BCF    0B.7
.................... 	    	display1(0);	 
00BB:  CLRF   2D
00BC:  CALL   056
00BD:  BTFSC  27.7
00BE:  BSF    0B.7
.................... 	    } 
.................... 	     
.................... 	    if(input(Incremento) == 1) 
00BF:  BSF    03.5
00C0:  BSF    06.7
00C1:  BCF    03.5
00C2:  BTFSC  06.7
.................... 	    { 
.................... 	     
.................... 	    } 
00C3:  GOTO   0CD
00C4:  CLRF   27
00C5:  BTFSC  0B.7
00C6:  BSF    27.7
00C7:  BCF    0B.7
.................... 	     
.................... 	    else 
.................... 	    	display1(num); 
00C8:  MOVF   29,W
00C9:  MOVWF  2D
00CA:  CALL   056
00CB:  BTFSC  27.7
00CC:  BSF    0B.7
00CD:  GOTO   0AB
.................... 	} 
.................... } 
.................... #ORG 0x1E80, 0x1EFF{} 
....................  
00CE:  GOTO   0CE
.................... /* 
.................... 						CÁLCULOS 
.................... 				 
.................... 	>> O Timer 1 é um temporizador de 16 bits, o que significa que pode contar até  
.................... 	o valor máximo de 65535 (0xFFFF) antes de ocorrer um estouro (overflow).  
.................... 	 
.................... 	O valor inicial do Timer é definido pelos registradores TMR1H e TMR1L 
.................... 	>> O período de cada contagem do Timer 1 usando a fórmula: 
.................... 		Tempo de estouro (ms) = (Período do Timer1) * (Valor máximo do Timer1) 
.................... 		Tempo de estouro (ms) = (0,2us) * 65535 = 13.107 ms = 0,013107s 
.................... */ 

Configuration Fuses:
   Word  1: 373B   RC NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
