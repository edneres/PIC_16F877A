CCS PCM C Compiler, Version 5.007, 61971               21-ago-23 23:24

               Filename:   C:\Users\edyne\OneDrive\Área de Trabalho\UFPI\Programação\2 - UFPI\6 - Lab de Micro\Prática 7 - Módulos CCP no modo de captura e comparação\codigo.lst

               ROM used:   135 words (2%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           11 (3%) worst case
               Stack used: 0 locations
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   03F
.................... /* 
.................... 	CCP1 >> Modo Captura, para medir o tempo de nível alto de um sinal	(TIMER1 em borda de subida) 
.................... 					Alta precisão e pouca interferência da CPU			 
.................... 	CCP2 >> Modo PWM, cuja frequência será 10KHz (T = 0,1ms = 100us)	(TIMER2) 
.................... 	 
.................... 	D = (tempo em nível alto) / (Período de 100us) = x%  
.................... 	 
.................... 	LÓGICA:  
.................... 		Se (tempo em nível alto) > 50us, LED acende. 
.................... 		Se não, apaga. 
.................... 		 
.................... 		LED >> RD2 
.................... 		RC1 >> Saída 
.................... 		RC2 >> Entrada  
.................... */ 
....................  
.................... /* 
.................... #include <16F877A.h> 
.................... #bit CCP1IF = 0x0C.0 
....................  
.................... void setup() 
.................... { 
.................... 	// MODOS E TIMERS // 
.................... 	setup_ccp1(CCP_CAPTURE_RE);	// CCP1 começa capturando a borda de subida 
.................... 	setup_ccp2(CCP_PWM);		// CCP2 no modo PWM 
.................... 	set_pwm2_duty(75); 
.................... } 
....................  
.................... void main() 
.................... { 
....................    setup(); 
....................    CCP1IF = 0; 
....................    unsigned int16 primeira_captura = 1, ti, periodo; 
....................     
....................    while(1) 
....................    { 
.................... 	   if(CCP1IF == 1)	// Faz a medição do período 
.................... 	   { 
.................... 		   CCP1IF = 0; 
.................... 		    
.................... 		   if(primeira_captura == 1) 
.................... 		   { 
.................... 			   ti = CCP_1; 
.................... 			   primeira_captura = 0; 
.................... 		   } 
.................... 		    
.................... 		   else 
.................... 		   { 
.................... 			   periodo = CCP_1 - ti; 
.................... 			   primeira_captura = 1; 
.................... 		   } 
.................... 	   }		    
.................... 		 
.................... 	   if(periodo > 5000)	// Tratando o dado medido (período) 
.................... 	   		output_high(pin_d2);	 
.................... 				    
.................... 	   else 
.................... 			output_low(pin_d2); 
....................    } 
.................... } 
.................... */ 
....................  
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #bit CCP1IF = 0x0C.0 
.................... //#bit LED = 0x08.2 
....................  
.................... unsigned int16 t0, duty_cycle = 100;  
....................  
.................... void setup() 
.................... { 
.................... 	// PERIFÉRICOS // 
.................... 	set_tris_c(0b00000100);	// RC1 como saída e RC2 como entrada 
0004:  MOVLW  04
0005:  BSF    03.5
0006:  MOVWF  07
0007:  BCF    03.5
0008:  MOVWF  24
.................... 	set_tris_d(0b00000000);	// RD2 como saída (LED) 
0009:  MOVLW  00
000A:  BSF    03.5
000B:  MOVWF  08
.................... 	output_low(PIN_D2); 
000C:  BCF    08.2
000D:  BCF    03.5
000E:  BCF    08.2
.................... 	 
.................... 	// MODOS E TIMERS // 
.................... 	setup_ccp1(CCP_CAPTURE_RE);	// CCP1 começa capturando a borda de subida 
000F:  BSF    24.2
0010:  MOVF   24,W
0011:  BSF    03.5
0012:  MOVWF  07
0013:  BCF    03.5
0014:  CLRF   17
0015:  MOVLW  05
0016:  MOVWF  17
.................... 	setup_ccp2(CCP_PWM);		// CCP2 no modo PWM 
0017:  BCF    24.1
0018:  MOVF   24,W
0019:  BSF    03.5
001A:  MOVWF  07
001B:  BCF    03.5
001C:  BCF    07.1
001D:  MOVLW  0C
001E:  MOVWF  1D
.................... 	 
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_4); 
001F:  MOVLW  A5
0020:  MOVWF  10
.................... 	setup_timer_2(T2_DIV_BY_4, 124, 10); 
0021:  MOVLW  48
0022:  MOVWF  78
0023:  IORLW  05
0024:  MOVWF  12
0025:  MOVLW  7C
0026:  BSF    03.5
0027:  MOVWF  12
.................... 	set_pwm2_duty(duty_cycle); 
0028:  BCF    03.5
0029:  MOVF   23,W
002A:  MOVWF  79
002B:  MOVF   22,W
002C:  MOVWF  78
002D:  RRF    79,F
002E:  RRF    78,F
002F:  RRF    79,F
0030:  RRF    78,F
0031:  RRF    79,F
0032:  MOVF   78,W
0033:  MOVWF  1B
0034:  RRF    79,F
0035:  RRF    79,W
0036:  ANDLW  30
0037:  MOVWF  77
0038:  MOVF   1D,W
0039:  ANDLW  CF
003A:  IORWF  77,W
003B:  MOVWF  1D
003C:  BCF    0A.3
003D:  BCF    0A.4
003E:  GOTO   050 (RETURN)
.................... } 
....................  
.................... void main() 
003F:  CLRF   23
0040:  MOVLW  64
0041:  MOVWF  22
0042:  MOVLW  FF
0043:  MOVWF  24
0044:  BSF    03.5
0045:  BSF    1F.0
0046:  BSF    1F.1
0047:  BSF    1F.2
0048:  BCF    1F.3
0049:  MOVLW  07
004A:  MOVWF  1C
004B:  BCF    03.7
004C:  MOVLW  1F
004D:  ANDWF  03,F
.................... { 
....................    setup(); 
004E:  BCF    03.5
004F:  GOTO   004
....................     
....................    while(1) 
....................    { 
.................... 	   if(CCP1IF == 1) 
0050:  BTFSS  0C.0
0051:  GOTO   085
.................... 	   { 
.................... 		   CCP1IF = 0; 
0052:  BCF    0C.0
.................... 		    
.................... 		   if(input(PIN_C2) == 1) 
0053:  BSF    24.2
0054:  MOVF   24,W
0055:  BSF    03.5
0056:  MOVWF  07
0057:  BCF    03.5
0058:  BTFSS  07.2
0059:  GOTO   067
.................... 		   { 
.................... 			   setup_ccp1(CCP_CAPTURE_FE); 
005A:  BSF    24.2
005B:  MOVF   24,W
005C:  BSF    03.5
005D:  MOVWF  07
005E:  BCF    03.5
005F:  CLRF   17
0060:  MOVLW  04
0061:  MOVWF  17
.................... 			   t0 = CCP_1; 
0062:  MOVF   16,W
0063:  MOVWF  21
0064:  MOVF   15,W
0065:  MOVWF  20
.................... 		   } 
0066:  GOTO   085
.................... 		    
.................... 		   else 
.................... 		   { 
.................... 			   CCP_1 = CCP_1 - t0; 
0067:  MOVF   20,W
0068:  SUBWF  15,F
0069:  MOVF   21,W
006A:  BTFSS  03.0
006B:  INCFSZ 21,W
006C:  SUBWF  16,F
.................... 			    
.................... 			   if(CCP_1 >= 250)	 
006D:  MOVF   16,F
006E:  BTFSS  03.2
006F:  GOTO   074
0070:  MOVF   15,W
0071:  SUBLW  F9
0072:  BTFSC  03.0
0073:  GOTO   079
.................... 				   output_high(PIN_D2); 
0074:  BSF    03.5
0075:  BCF    08.2
0076:  BCF    03.5
0077:  BSF    08.2
0078:  GOTO   07D
.................... 				    
.................... 			   else 
.................... 			   	   output_low(PIN_D2); 
0079:  BSF    03.5
007A:  BCF    08.2
007B:  BCF    03.5
007C:  BCF    08.2
.................... 			   	    
.................... 			   setup_ccp1(CCP_CAPTURE_RE); 
007D:  BSF    24.2
007E:  MOVF   24,W
007F:  BSF    03.5
0080:  MOVWF  07
0081:  BCF    03.5
0082:  CLRF   17
0083:  MOVLW  05
0084:  MOVWF  17
.................... 		   } 
.................... 	   } 
0085:  GOTO   050
....................    } 
.................... } 
0086:  GOTO   086

Configuration Fuses:
   Word  1: 373B   RC NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
